[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "QuartoDocBuilder.jl",
    "section": "",
    "text": "QuartoDocBuilder.jl\nQuartoDocBuilder.jl is a package inspired by R pkgdown. It provides an easy way to generate a website with documentation and vignettes, by creating a Quarto project.\nBeing powered by Quarto means that deploying to Github pages, customizing the style and many more things are taken for granted. This website doc even has a comment section! Check some examples here and the complete list of options here.\nThe Quarto website itself is written with Quarto! Check the github repo here to get some inspiration.\n\n\nFeatures\n\n\n\nEasy configuration\nInstall the latest Quarto version, ]add QuartoDocBuilder, run quarto_build_site and you are done. It’s up to you write the best doc ever!\n\nLearn more »\n\n\n\nComment section\nEvery page can have a commentary section. Let people speak! By default, QuartoDocBuilder.jl provides Discus, which is the easiest to configure.\n\nLearn more »\n\n\n\nScientific Markdown\nInline code, LaTeX equations and citations, cross-references, figure panels, callouts, advanced page layout, comment sections and so on. It’s time to write some \\(e^{i \\pi} + 1 = 0\\)!\n\nLearn more »\n\n\n\nWebsites and Books\nWant to publish your really nice tutorial in an online book? Or make a blog? Or a Word document? Or a pdf with LaTeX? Well, use the same files and render the project with Quarto!\n\nLearn more »\n\n\n\nCustomization\nWith a bit of .css magic you can customize almost everything! Why not put a spinning raccoon in the middle of a serious text?\n\n\n\n\n\nLearn more »\n\n\n\nMultilanguage\nBy default, QuartoDocBuilder uses the julia engine provided by QuartoNotebookRunner.jl, but you can use Jupyter and be able to run R and Python code along with Julia in the same document!\n\nLearn more »"
  },
  {
    "objectID": "reference/quarto_index.html",
    "href": "reference/quarto_index.html",
    "title": "quarto_index",
    "section": "",
    "text": "quarto_index\n\n\n\n\n\n\ndocblock\n\n\n\n\n\n\nquarto_index()\n\nGenerate the index.qmd file. It is just a copy of the README.md file.",
    "crumbs": [
      "Reference",
      "quarto_index"
    ]
  },
  {
    "objectID": "reference/quarto_build_site.html",
    "href": "reference/quarto_build_site.html",
    "title": "quarto_build_site",
    "section": "",
    "text": "quarto_build_site\n\n\n\n\n\n\ndocblock\n\n\n\n\n\n\nquarto_build_site(module_name; kwargs...)\n\nCreate all the files necessary to build the Quarto website for the first time.\n\nArguments\n\nmodule_name: your module’s name.\nkwargs...: kwargs passed to quarto_yaml.\n\n\n\nDetails\nThis function does a lot of things!\n\nCreate the docs directory, if it doesn’t exist.\nCreate docs/_quarto.yaml, which is the file that contains all information about how to render the website as a Quarto project.\nCreate the directory docs/reference and the file docs/reference.qmd if they don’t exist.\nCreate the directory docs/tutorials and the file docs/tutorials.qmd if they don’t exist, together with docs/tutorials/tutorial-01.qmd.\nCopy your README.md file as docs/index.qmd.\nCreate docs/styles.css with some predefined styles.\nCreate a .qmd file in docs/reference for each object in module_name.",
    "crumbs": [
      "Reference",
      "quarto_build_site"
    ]
  },
  {
    "objectID": "reference/quarto_styles.html",
    "href": "reference/quarto_styles.html",
    "title": "quarto_styles",
    "section": "",
    "text": "quarto_styles\n\n\n\n\n\n\ndocblock\n\n\n\n\n\n\nquarto_styles()\n\nCreate the docs/styles.css file with some suggested css classes.",
    "crumbs": [
      "Reference",
      "quarto_styles"
    ]
  },
  {
    "objectID": "reference/quarto_yaml.html",
    "href": "reference/quarto_yaml.html",
    "title": "quarto_yaml",
    "section": "",
    "text": "quarto_yaml\n\n\n\n\n\n\ndocblock\n\n\n\n\n\n\nquarto_yaml(\n  module_name\n  ;output_dir = \"site\"\n  ,freeze = \"auto\"\n  ,cache = \"true\"\n  ,warning = \"false\"\n  ,comments = \"true\"\n  ,repo = \"USERNAME/REPOSITORY\"\n  ,theme = \"flatly\"\n  )\n\nGenerate the _quarto.yaml file.\n\nArguments\n\nmodule_name: the name of the current module.\noutput_dir: the directory of the output, inside /docs/ .\nfreeze, cache, warning: execution options in Quarto.\ncomments: if the comment section with Discus is enabled.\nrepo: string in the format USERNAME/REPOSITORY so your comment section work with Discus.\ntheme: one of the bootswatch themes available in Quarto.\n\n\n\nDetails\nThis function creates the docs/_quarto.yaml file. See https://quarto.org/docs/reference/projects/websites.html for more details.",
    "crumbs": [
      "Reference",
      "quarto_yaml"
    ]
  },
  {
    "objectID": "reference/quarto_callout_block.html",
    "href": "reference/quarto_callout_block.html",
    "title": "quarto_callout_block",
    "section": "",
    "text": "quarto_callout_block\n\n\n\n\n\n\ndocblock\n\n\n\n\n\n\nquarto_callout_block(s)\n\nCreate a callout block with the string s.",
    "crumbs": [
      "Reference",
      "quarto_callout_block"
    ]
  },
  {
    "objectID": "tutorials/tutorial-01.html",
    "href": "tutorials/tutorial-01.html",
    "title": "From zero to nice docs!",
    "section": "",
    "text": "In this tutorial I will explain the steps to build your docs without too much of a headache! I will use my package TidierIteration.jl as an example.\n\n\n\n\nIn your package directory (in my case, Github/TidierIteration), create a docs directory.\nNow create a Julia script named make.jl inside docs with the following content:\n\nusing TidierIteration\nusing QuartoDocBuilder\n\nquarto_build_site(TidierIteration, repo = \"TidierOrg/TidierIteration.jl\")\n\n\n\n\nI don’t want to make QuartoDocBuilder a dependency on TidierIteration! So I have to change my environment to use this package. To do this is easy: go to the REPL and type\n\n] activate docs\n\nThe output is\n  Activating new project at `~/Documentos/GitHub/TidierIteration.jl/docs`\nNow you add these two packages as dependencies to the docs environment:\n\n] add ../TidierIteration.jl/\n\nand\n\n] add https://github.com/vituri/QuartoDocBuilder.jl\n\nNote: here ] denote the pkg mode in the REPL. If you are already in pkg mode, don’t need to type ].\n\n\n\nNow we are good to go! Just run the docs/make.jl (line by line in VSCode, for example).\nIf everything went smoothly (I hope so!), your docs/ folder will looks like this:\n\n\n\nA nice docs folder.\n\n\n\n\n\nAll these .qmd files are useless if we don’t have Quarto installed! Go to https://quarto.org/docs/download/ and install. Important: you need to install the latest pre-release version, otherwise you won’t have the julia engine!\nIf you use VSCode, I strongly suggest that you also install the Quarto extension.\n\n\n\nNow is the best part: open docs/index.qmd and press the “preview” button on VSCode\n\nThe magic will start to happen and all .qmd files will be rendered into pages:\n\nIf everything went alright, you will see this interactive viewer:\n\nIn this case, I needed to copy the assets/ directory to the docs/ folder.\n\n\n\nComment sections are a great way to see if people are having trouble to understand your docs! By default, QuartoDocBuilder enables the comment section using Discus. You need to give permission to Discus interact with your Discussion section on Github.\n\n\n\nEnabling the Discussion tab on your repository.\n\n\nGo to https://github.com/apps/giscus and allow Discus to access your repo:\n\n\n\n\n\n\n\nNow it’s time to shine! Use the bash and go to your docs/ folder. Simply run the following command:\nquarto publish\n\nChoose Github Pages and you are good to go!\n\n\n\nCheck if your Github Pages is set to use the branch gh-pages and the folder “/” (root).\n\n\n\n\nAfter all this trouble, your Quarto website is online! You will see something like this:\n\n\n\n\n\nWhat now? How can I make my docs even better, add tutorials and examples? This is the content of the next tutorial…",
    "crumbs": [
      "Tutorials",
      "From zero to nice docs!"
    ]
  },
  {
    "objectID": "tutorials/tutorial-01.html#first-steps",
    "href": "tutorials/tutorial-01.html#first-steps",
    "title": "From zero to nice docs!",
    "section": "",
    "text": "In your package directory (in my case, Github/TidierIteration), create a docs directory.\nNow create a Julia script named make.jl inside docs with the following content:\n\nusing TidierIteration\nusing QuartoDocBuilder\n\nquarto_build_site(TidierIteration, repo = \"TidierOrg/TidierIteration.jl\")\n\n\n\n\nI don’t want to make QuartoDocBuilder a dependency on TidierIteration! So I have to change my environment to use this package. To do this is easy: go to the REPL and type\n\n] activate docs\n\nThe output is\n  Activating new project at `~/Documentos/GitHub/TidierIteration.jl/docs`\nNow you add these two packages as dependencies to the docs environment:\n\n] add ../TidierIteration.jl/\n\nand\n\n] add https://github.com/vituri/QuartoDocBuilder.jl\n\nNote: here ] denote the pkg mode in the REPL. If you are already in pkg mode, don’t need to type ].\n\n\n\nNow we are good to go! Just run the docs/make.jl (line by line in VSCode, for example).\nIf everything went smoothly (I hope so!), your docs/ folder will looks like this:\n\n\n\nA nice docs folder.\n\n\n\n\n\nAll these .qmd files are useless if we don’t have Quarto installed! Go to https://quarto.org/docs/download/ and install. Important: you need to install the latest pre-release version, otherwise you won’t have the julia engine!\nIf you use VSCode, I strongly suggest that you also install the Quarto extension.\n\n\n\nNow is the best part: open docs/index.qmd and press the “preview” button on VSCode\n\nThe magic will start to happen and all .qmd files will be rendered into pages:\n\nIf everything went alright, you will see this interactive viewer:\n\nIn this case, I needed to copy the assets/ directory to the docs/ folder.\n\n\n\nComment sections are a great way to see if people are having trouble to understand your docs! By default, QuartoDocBuilder enables the comment section using Discus. You need to give permission to Discus interact with your Discussion section on Github.\n\n\n\nEnabling the Discussion tab on your repository.\n\n\nGo to https://github.com/apps/giscus and allow Discus to access your repo:\n\n\n\n\n\n\n\nNow it’s time to shine! Use the bash and go to your docs/ folder. Simply run the following command:\nquarto publish\n\nChoose Github Pages and you are good to go!\n\n\n\nCheck if your Github Pages is set to use the branch gh-pages and the folder “/” (root).\n\n\n\n\nAfter all this trouble, your Quarto website is online! You will see something like this:",
    "crumbs": [
      "Tutorials",
      "From zero to nice docs!"
    ]
  },
  {
    "objectID": "tutorials/tutorial-01.html#next-steps",
    "href": "tutorials/tutorial-01.html#next-steps",
    "title": "From zero to nice docs!",
    "section": "",
    "text": "What now? How can I make my docs even better, add tutorials and examples? This is the content of the next tutorial…",
    "crumbs": [
      "Tutorials",
      "From zero to nice docs!"
    ]
  },
  {
    "objectID": "tutorials.html",
    "href": "tutorials.html",
    "title": "Tutorials",
    "section": "",
    "text": "Tutorials\nDescribe your tutorials here.",
    "crumbs": [
      "Tutorials"
    ]
  },
  {
    "objectID": "tutorials/tutorial-02.html",
    "href": "tutorials/tutorial-02.html",
    "title": "Adding content",
    "section": "",
    "text": "After the first tutorial, we have a basic Quarto website running. But what if we want to add more things?\n\n\nAt the start of every .qmd file you create, add the lines\n\n---\nengine: julia\n---\n\n\nso Quarto will use the julia engine (and not the jupyter one).\n\n\n\nAll .qmd files in the docs/tutorials folder will be rendered and put together on the Tutorials tab. If you want more control over which .qmd files will be rendered and in which order, you will need to edit the file docs/_quarto.yaml. See more details at the Quarto official documentation.\nIn TidierIteration.jl, I added the following files\n\nwhich rendered as follows\n\n\n\n\nIf you kept developing your package and added more functions (or modified some existent ones), it is a good idea to remake all .qmd files on the docs/reference/ folder. To do that, activate the docs/ environment like in the previous tutorial and run the following:\n\nusing .TidierIteration\nusing QuartoDocBuilder\n\nobjs = get_objects_from_module(module_name)\nobjs .|&gt; quarto_doc_page\n\nThis can also be written in the docs/make.jl file. If you want to rewrite the docs/reference.qmd file, add the following line:\n\nquarto_build_refpage(TidierIteration)\n\nBe careful: this will overwrite your current docs/reference.qmd file! In case you want to write the content of this file into another file, pass the optional argument output:\n\nquarto_build_refpage(TidierIteration, output = \"docs/reference2.qmd\")\n\n\n\n\nAll this can be done by modifying the docs/_quarto.yaml file. Learn how to do it here. For example, here are different ways to navigate in your site, changing the header and so on.",
    "crumbs": [
      "Tutorials",
      "Adding content"
    ]
  },
  {
    "objectID": "tutorials/tutorial-02.html#the-julia-engine",
    "href": "tutorials/tutorial-02.html#the-julia-engine",
    "title": "Adding content",
    "section": "",
    "text": "At the start of every .qmd file you create, add the lines\n\n---\nengine: julia\n---\n\n\nso Quarto will use the julia engine (and not the jupyter one).",
    "crumbs": [
      "Tutorials",
      "Adding content"
    ]
  },
  {
    "objectID": "tutorials/tutorial-02.html#adding-tutorials",
    "href": "tutorials/tutorial-02.html#adding-tutorials",
    "title": "Adding content",
    "section": "",
    "text": "All .qmd files in the docs/tutorials folder will be rendered and put together on the Tutorials tab. If you want more control over which .qmd files will be rendered and in which order, you will need to edit the file docs/_quarto.yaml. See more details at the Quarto official documentation.\nIn TidierIteration.jl, I added the following files\n\nwhich rendered as follows",
    "crumbs": [
      "Tutorials",
      "Adding content"
    ]
  },
  {
    "objectID": "tutorials/tutorial-02.html#adding-more-function-to-the-reference-page",
    "href": "tutorials/tutorial-02.html#adding-more-function-to-the-reference-page",
    "title": "Adding content",
    "section": "",
    "text": "If you kept developing your package and added more functions (or modified some existent ones), it is a good idea to remake all .qmd files on the docs/reference/ folder. To do that, activate the docs/ environment like in the previous tutorial and run the following:\n\nusing .TidierIteration\nusing QuartoDocBuilder\n\nobjs = get_objects_from_module(module_name)\nobjs .|&gt; quarto_doc_page\n\nThis can also be written in the docs/make.jl file. If you want to rewrite the docs/reference.qmd file, add the following line:\n\nquarto_build_refpage(TidierIteration)\n\nBe careful: this will overwrite your current docs/reference.qmd file! In case you want to write the content of this file into another file, pass the optional argument output:\n\nquarto_build_refpage(TidierIteration, output = \"docs/reference2.qmd\")",
    "crumbs": [
      "Tutorials",
      "Adding content"
    ]
  },
  {
    "objectID": "tutorials/tutorial-02.html#creating-more-tabs-adjusting-the-layout-and-so-on",
    "href": "tutorials/tutorial-02.html#creating-more-tabs-adjusting-the-layout-and-so-on",
    "title": "Adding content",
    "section": "",
    "text": "All this can be done by modifying the docs/_quarto.yaml file. Learn how to do it here. For example, here are different ways to navigate in your site, changing the header and so on.",
    "crumbs": [
      "Tutorials",
      "Adding content"
    ]
  },
  {
    "objectID": "reference.html",
    "href": "reference.html",
    "title": "Reference",
    "section": "",
    "text": "Reference\nquarto_format(m::Markdown.Code, eval = false)\n\nFormat a block of markdown code to Quarto.\n\n\nquarto_format(m)\n\nReturn a plain text from m.\n\n\nquarto_format(m::Markdown.Paragraph)\n\nReturn a plain text of m and a line break.\n\n\nquarto_format(m::AbstractString)\n\nReturns m.\n\n\nquarto_format(m::Markdown.Header{1})\n\nTake a level 1 header and write it as a level 3 header.\n\n\nquarto_format(md::Markdown.MD)\n\nGiven a markdown block, apply quarto_format to each of its elements and concatenate the resulting string.\n\n\nquarto_format(md::Markdown.Admonition)\n\nFormat a Markdown.Admonition into a callout block in Quarto.\n\n\nquarto_yaml( module_name ;output_dir = “site” ,freeze = “auto” ,cache = “true” ,warning = “false” ,comments = “true” ,repo = “USERNAME/REPOSITORY” ,theme = “flatly” )\n\nGenerate the _quarto.yaml file.\n\n\nquarto_doc(s::Symbol)\n\nCreate the documentation of a symbol (function, object, etc) s.\n\n\nquarto_doc_page(s; dir = “docs/reference”)\n\nGiven a symbol s, write its .qmd doc into the folder dir.\n\n\nquarto_doc_short(s::Symbol)\n\nCreate a short description of the object. Used to build the Reference page.\n\n\nquarto_build_site(module_name; kwargs…)\n\nCreate all the files necessary to build the Quarto website for the first time.\n\n\nquarto_styles()\n\nCreate the docs/styles.css file with some suggested css classes.\n\n\nquarto_callout_block(s)\n\nCreate a callout block with the string s.\n\n\nquarto_index()\n\nGenerate the index.qmd file. It is just a copy of the README.md file.\n\n\nquarto_build_refpage(module_name; output = “docs/reference.qmd”)\n\nBuild the docs/reference.qmd file with a short description of each object.",
    "crumbs": [
      "Reference"
    ]
  },
  {
    "objectID": "reference/quarto_format.html",
    "href": "reference/quarto_format.html",
    "title": "quarto_format",
    "section": "",
    "text": "quarto_format\n\n\n\n\n\n\ndocblock\n\n\n\n\n\n\nquarto_format(m::Markdown.Code, eval = false)\n\nFormat a block of markdown code to Quarto.\n\nArguments\n\nm::Markdown: a block of Markdown.Code.\neval: if false, then the resulting block is not going to be evaluated.\n\n\n\n\n\n\n\n\n\n\n\n\ndocblock\n\n\n\n\n\n\nquarto_format(m)\n\nReturn a plain text from m.\n\n\n\n\n\n\n\n\n\n\ndocblock\n\n\n\n\n\n\nquarto_format(m::Markdown.Paragraph)\n\nReturn a plain text of m and a line break.\n\n\n\n\n\n\n\n\n\n\ndocblock\n\n\n\n\n\n\nquarto_format(m::AbstractString)\n\nReturns m.\n\n\n\n\n\n\n\n\n\n\ndocblock\n\n\n\n\n\n\nquarto_format(m::Markdown.Header{1})\n\nTake a level 1 header and write it as a level 3 header.\n\n\n\n\n\n\n\n\n\n\ndocblock\n\n\n\n\n\n\nquarto_format(md::Markdown.MD)\n\nGiven a markdown block, apply quarto_format to each of its elements and concatenate the resulting string.\n\n\n\n\n\n\n\n\n\n\ndocblock\n\n\n\n\n\n\nquarto_format(md::Markdown.Admonition)\n\nFormat a Markdown.Admonition into a callout block in Quarto.",
    "crumbs": [
      "Reference",
      "quarto_format"
    ]
  },
  {
    "objectID": "reference/quarto_build_refpage.html",
    "href": "reference/quarto_build_refpage.html",
    "title": "quarto_build_refpage",
    "section": "",
    "text": "quarto_build_refpage\n\n\n\n\n\n\ndocblock\n\n\n\n\n\n\nquarto_build_refpage(module_name; output = \"docs/reference.qmd\")\n\nBuild the docs/reference.qmd file with a short description of each object.\n\nArguments\n\nmodule_name: the module name.\noutput: the output file. By default, it is “docs/reference.qmd”.",
    "crumbs": [
      "Reference",
      "quarto_build_refpage"
    ]
  },
  {
    "objectID": "reference/quarto_doc_short.html",
    "href": "reference/quarto_doc_short.html",
    "title": "quarto_doc_short",
    "section": "",
    "text": "quarto_doc_short\n\n\n\n\n\n\ndocblock\n\n\n\n\n\n\nquarto_doc_short(s::Symbol)\n\nCreate a short description of the object. Used to build the Reference page.",
    "crumbs": [
      "Reference",
      "quarto_doc_short"
    ]
  },
  {
    "objectID": "reference/quarto_doc_page.html",
    "href": "reference/quarto_doc_page.html",
    "title": "quarto_doc_page",
    "section": "",
    "text": "quarto_doc_page\n\n\n\n\n\n\ndocblock\n\n\n\n\n\n\nquarto_doc_page(s; dir = \"docs/reference\")\n\nGiven a symbol s, write its .qmd doc into the folder dir.",
    "crumbs": [
      "Reference",
      "quarto_doc_page"
    ]
  },
  {
    "objectID": "reference/quarto_doc.html",
    "href": "reference/quarto_doc.html",
    "title": "quarto_doc",
    "section": "",
    "text": "quarto_doc\n\n\n\n\n\n\ndocblock\n\n\n\n\n\n\nquarto_doc(s::Symbol)\n\nCreate the documentation of a symbol (function, object, etc) s.",
    "crumbs": [
      "Reference",
      "quarto_doc"
    ]
  }
]